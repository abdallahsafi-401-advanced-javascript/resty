{"version":3,"sources":["components/header/header.js","components/footer/footer.js","components/form/Form.js","components/results/Results.js","components/history/History.js","App.js","serviceWorker.js","index.js"],"names":["Header","Footer","Form","props","state","url","method","handleChangeURL","bind","handleSubmit","handleChangeMethod","event","this","setState","target","value","preventDefault","parentCallback","onSubmit","type","onChange","name","defaultChecked","React","Component","Results","apiData","id","count","src","theme","History","sendData","data","retrived","JSON","parse","localStorage","getItem","items","index","push","key","onClick","Object","entries","App","handleChange","formData","a","handleRequest","superagent","store","results","body","console","log","header","base64","encode","keys","includes","setItem","stringify","stored","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1b82a76b.chunk.js","sourcesContent":["import React from 'react';\nimport './header.scss';\n\n\nconst Header = () => {\n    return (\n      <header>\n        <h1>RESTy</h1>\n      </header>\n    );\n  };\n\n  export default Header;\n","import React from 'react';\nimport './footer.scss';\n\n\nconst Footer = () => {\n    return (\n      <footer>\n        <h1>footer</h1>\n      </footer>\n    );\n  };\n\n  export default Footer;\n","import React from \"react\";\nimport \"./form.scss\";\n\nexport default class Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { url: this.props.url, method: this.props.method };\n    this.handleChangeURL = this.handleChangeURL.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChangeMethod = this.handleChangeMethod.bind(this);\n  }\n  static getDerivedStateFromProps(props) {\n    return { url: props.url, method: props.method };\n  }\n\n  handleChangeURL(event) {\n    this.setState({ url: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.parentCallback(this.state);\n  }\n\n  handleChangeMethod(event) {\n    this.setState({ method: event.target.value });\n  }\n\n  render() {\n    return (\n      <>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            URL:\n            <input\n              type=\"text\"\n              value={this.state.url}\n              onChange={this.handleChangeURL}\n            />\n          </label>\n          <input type=\"submit\" value=\"Go!\" />\n          <div onChange={this.handleChangeMethod}>\n            <input type=\"radio\" value=\"Get\" name=\"method\" defaultChecked={this.props.method === 'Get'} /> Get\n            <input type=\"radio\" value=\"Post\" name=\"method\" defaultChecked={this.props.method === 'Post'} /> Post\n            <input type=\"radio\" value=\"Put\" name=\"method\" defaultChecked={this.props.method === 'Put'}/> Put\n            <input type=\"radio\" value=\"Delete\" name=\"method\" defaultChecked={this.props.method === 'Delete'}/> Delete\n          </div>\n        </form>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./results.scss\";\nimport ReactJson from \"react-json-view\";\n\nexport default class Results extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = this.props.apiData;\n  }\n\n  render() {\n    return (\n      <div id=\"api-out\">\n        {this.props.apiData.count !==0 && (\n          <ReactJson src={this.props.apiData} theme=\"monokai\" />\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./history.scss\";\n\nexport default class History extends React.Component {\n  constructor(props) {\n    super(props);\n    this.sendData = this.sendData.bind(this);\n  }\n   sendData(data) {\n     this.props.parentCallback(data);\n  }\n  render() {\n    let retrived = JSON.parse(localStorage.getItem(\"history\"));\n    const items = [];\n    if (retrived) {\n      for (const [index, value] of Object.entries(retrived)) {\n        items.push(\n          <li key={index}>\n            <div id=\"history\">\n              <h3>{value.method}</h3>\n              <button\n                onClick={() =>\n                  this.sendData({ method: value.method, url: value.url })\n                }\n              >\n                {value.url}\n              </button>\n            </div>\n          </li>\n        );\n      }\n    }\n\n    return <div>{items}</div>;\n  }\n}\n","import React from \"react\";\nimport superagent from \"superagent\";\nimport base64 from \"base-64\";\nimport \"./reset.css\";\nimport \"./app.scss\";\nimport Header from \"./components/header/header\";\nimport Footer from \"./components/footer/footer\";\nimport Form from \"./components/form/Form\";\nimport Results from \"./components/results/Results\";\nimport History from \"./components/history/History\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      header: {},\n      count: 0,\n      results: [],\n      method: \"Get\",\n      url: \"\",\n    };\n  }\n\n  handleChange = async (formData) => {\n    await this.setState({ method: formData.method, url: formData.url });\n  };\n\n  handleRequest = async (formData) => {\n    // await this.setState({ method: formData.method, url: formData.url });\n    let data;\n    try {\n      data = await superagent(formData.method, formData.url);\n      this.store({\n        url: formData.url,\n        method: formData.method,\n        results: data.body,\n      });\n    } catch (e) {\n      console.log(e);\n    }\n    this.setState({\n      count: data.body.count,\n      results: data.body.results,\n      header: data.header,\n      method: formData.method,\n      url: formData.url,\n    });\n  };\n\n  store(data) {\n    let retrived = JSON.parse(localStorage.getItem(\"history\"));\n    // create id and check if we store this request before\n    let id = base64.encode(`${data.method}${data.url}`);\n    if (retrived && Object.keys(retrived).includes(id)) {\n      return;\n    } else if (retrived) {\n      retrived[id] = data;\n      localStorage.setItem(\"history\", JSON.stringify(retrived));\n    } else {\n      let stored = {};\n      stored[id] = data;\n      localStorage.setItem(\"history\", JSON.stringify(stored));\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <Header />\n        <Form\n          parentCallback={this.handleRequest}\n          url={this.state.url}\n          method={this.state.method}\n        />\n        <Results apiData={this.state} />\n        <History parentCallback={this.handleChange} />\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}