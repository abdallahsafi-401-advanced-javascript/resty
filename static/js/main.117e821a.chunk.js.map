{"version":3,"sources":["components/header/header.js","components/footer/footer.js","components/form/Form.js","components/results/Results.js","App.js","serviceWorker.js","index.js"],"names":["Header","Footer","Form","state","url","method","isSubmitted","handleChangeURL","bind","handleSubmit","handleChangeMethod","event","this","setState","target","value","preventDefault","fetch","raw","json","jsonData","console","log","props","parentCallback","count","results","headers","onSubmit","type","onChange","name","defaultChecked","id","React","Component","Results","apiData","src","theme","App","handleChange","header","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0VAYiBA,G,kBARF,WACX,OACE,gCACE,wCCKSC,G,MARF,WACX,OACE,gCACE,yC,8BCJaC,G,wDACnB,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CAAEC,IAAK,GAAIC,OAAQ,MAAOC,aAAa,GACpD,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,mBAAqB,EAAKA,mBAAmBF,KAAxB,gBALd,E,4DAQEG,GACdC,KAAKC,SAAS,CAAEP,aAAa,IAC7BM,KAAKC,SAAS,CAAET,IAAKO,EAAMG,OAAOC,U,4EAGjBJ,G,gFACjBA,EAAMK,iBACNJ,KAAKC,SAAS,CAAEP,aAAa,I,SACbW,MAAML,KAAKT,MAAMC,K,cAA7Bc,E,gBACiBA,EAAIC,O,OAArBC,E,OACJC,QAAQC,IAAI,wBAAsBF,GAQlCR,KAAKW,MAAMC,eAAeJ,EAASK,MAAOL,EAASM,QAASR,EAAIS,S,iJAG/ChB,GACjBC,KAAKC,SAAS,CAAEP,aAAa,IAC7BM,KAAKC,SAAS,CAAER,OAAQM,EAAMG,OAAOC,U,+BAIrC,OACE,oCACE,0BAAMa,SAAUhB,KAAKH,cACnB,sCAEE,2BACEoB,KAAK,OACLd,MAAOH,KAAKT,MAAMY,MAClBe,SAAUlB,KAAKL,mBAGnB,2BAAOsB,KAAK,SAASd,MAAM,QAC3B,yBAAKe,SAAUlB,KAAKF,oBAClB,2BAAOmB,KAAK,QAAQd,MAAM,MAAMgB,KAAK,SAASC,gBAAc,IAD9D,OAEE,2BAAOH,KAAK,QAAQd,MAAM,OAAOgB,KAAK,WAFxC,QAGE,2BAAOF,KAAK,QAAQd,MAAM,MAAMgB,KAAK,WAHvC,OAIE,2BAAOF,KAAK,QAAQd,MAAM,SAASgB,KAAK,WAJ1C,YAQDnB,KAAKT,MAAMG,aACV,yBAAK2B,GAAG,gBACN,4CACA,mCACO,8BAAOrB,KAAKT,MAAMC,MAEzB,sCACU,8BAAOQ,KAAKT,MAAME,e,GA/DN6B,IAAMC,Y,yBCCnBC,E,kDACnB,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IACDpB,MAAQ,EAAKoB,MAAMc,QAFP,E,qDAMjB,OACE,yBAAKJ,GAAG,WACuB,IAA5BrB,KAAKW,MAAMc,QAAQZ,OAClB,kBAAC,IAAD,CAAWa,IAAK1B,KAAKW,MAAMc,QAASE,MAAM,iB,GAVfL,IAAMC,WCqC5BK,E,kDA5Bb,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IAQRkB,aAAe,SAAChB,EAAOC,EAASgB,GAC9B,EAAK7B,SAAS,CAACY,MAAOA,EAAOC,QAASA,EAASgB,OAAQA,IACvDrB,QAAQC,IAAI,QAAS,EAAKnB,QAT1B,EAAKA,MAAQ,CACXuC,OAAO,GACPjB,MAAO,EACPC,QAAS,IALM,E,qDAiBjB,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOF,eAAkBZ,KAAK6B,eAC9B,kBAAC,EAAD,CAASJ,QAAWzB,KAAKT,QACzB,kBAAC,EAAD,W,GAvBU+B,IAAMC,WCAJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.117e821a.chunk.js","sourcesContent":["import React from 'react';\nimport './header.scss';\n\n\nconst Header = () => {\n    return (\n      <header>\n        <h1>RESTy</h1>\n      </header>\n    );\n  };\n\n  export default Header;\n","import React from 'react';\nimport './footer.scss';\n\n\nconst Footer = () => {\n    return (\n      <footer>\n        <h1>footer</h1>\n      </footer>\n    );\n  };\n\n  export default Footer;\n","import React from \"react\";\nimport \"./form.scss\";\n\nexport default class Form extends React.Component {\n  constructor() {\n    super();\n    this.state = { url: \"\", method: \"Get\", isSubmitted: false };\n    this.handleChangeURL = this.handleChangeURL.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChangeMethod = this.handleChangeMethod.bind(this);\n  }\n\n  handleChangeURL(event) {\n    this.setState({ isSubmitted: false });\n    this.setState({ url: event.target.value });\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    this.setState({ isSubmitted: true });\n    let raw = await fetch(this.state.url);\n    let jsonData = await raw.json();\n    console.log('raw.headers ----->', jsonData);\n    \n    // let data = {\n    //   count: jsonData.count,\n    //   results: jsonData.results.map((e) => {\n    //     return {name : e.name , url : e.url};\n    //   }),\n    // };\n    this.props.parentCallback(jsonData.count, jsonData.results, raw.headers);\n  }\n\n  handleChangeMethod(event) {\n    this.setState({ isSubmitted: false });\n    this.setState({ method: event.target.value });\n  }\n\n  render() {\n    return (\n      <>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            URL:\n            <input\n              type=\"text\"\n              value={this.state.value}\n              onChange={this.handleChangeURL}\n            />\n          </label>\n          <input type=\"submit\" value=\"Go!\" />\n          <div onChange={this.handleChangeMethod}>\n            <input type=\"radio\" value=\"Get\" name=\"method\" defaultChecked /> Get\n            <input type=\"radio\" value=\"Post\" name=\"method\" /> Post\n            <input type=\"radio\" value=\"Put\" name=\"method\" /> Put\n            <input type=\"radio\" value=\"Delete\" name=\"method\" /> Delete\n          </div>\n        </form>\n\n        {this.state.isSubmitted && (\n          <div id=\"user-choices\">\n            <h3>User Choices</h3>\n            <p>\n              URL: <span>{this.state.url}</span>\n            </p>\n            <p>\n              METHOD: <span>{this.state.method}</span>\n            </p>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./results.scss\";\nimport ReactJson from \"react-json-view\";\n\nexport default class Results extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = this.props.apiData;\n  }\n\n  render() {\n    return (\n      <div id=\"api-out\">\n        {this.props.apiData.count !==0 && (\n          <ReactJson src={this.props.apiData} theme=\"monokai\" />\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './reset.css';\nimport './app.scss';\nimport Header from './components/header/header';\nimport Footer from './components/footer/footer';\nimport Form from './components/form/Form';\nimport Results from './components/results/Results';\n\n\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      header:{},\n      count: 0,\n      results: []\n    };\n  }\n\n  handleChange = (count, results, header) => {\n    this.setState({count: count, results: results, header: header});\n    console.log('state', this.state);\n   \n  };\n\n\n  render() {\n    return (\n      <>\n        <Header />\n        <Form  parentCallback = {this.handleChange}/>\n        <Results apiData = {this.state}/>\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}